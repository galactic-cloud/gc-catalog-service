openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: abc
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://localhost:8081
tags:
  - name: category
    description: Everything about your Category
  - name: product
    description: Everything about your Product
  - name: unit
    description: Everything about your Unit
  - name: bundle
    description: Everything about your Bundle
paths:
  /category:
    get:
      tags:
        - category
      summary: get all categories
      description: get all categories
      operationId: getAllCategory
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryDto"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryDto"
        "400":
          description: Invalid status value
    put:
      tags:
        - category
      summary: Update an existing category
      description: Update an existing category by Id
      operationId: updateCategory
      requestBody:
        description: Update an existent category in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryDto"
          application/xml:
            schema:
              $ref: "#/components/schemas/CategoryDto"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/CategoryDto"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryDto"
            application/xml:
              schema:
                $ref: "#/components/schemas/CategoryDto"
        "400":
          description: Invalid ID supplied
        "404":
          description: Category not found
        "405":
          description: Validation exception
    post:
      tags:
        - category
      summary: Add a new category to the store
      description: Add a new category to the store
      operationId: addCategory
      requestBody:
        description: Create a new category in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryDto"
          application/xml:
            schema:
              $ref: "#/components/schemas/CategoryDto"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/CategoryDto"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryDto"
            application/xml:
              schema:
                $ref: "#/components/schemas/CategoryDto"
        "405":
          description: Invalid input
  /category/{name}:
    get:
      tags:
        - category
      summary: Finds categories by name
      operationId: getCategoryByName
      parameters:
        - name: name
          in: path
          description: "The name that needs to be fetched. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryDto"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryDto"
        "400":
          description: Invalid status value
  /category/{id}:
    get:
      tags:
        - category
      summary: Find category by id
      operationId: getCategoryById
      parameters:
        - name: id
          in: path
          description: "The id that needs to be fetched. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryDto"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryDto"
        "400":
          description: Invalid status value
    delete:
      tags:
        - category
      summary: Delete category by id
      operationId: DeleteCategoryById
      parameters:
        - name: id
          in: path
          description: "The id that needs to be fetched. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryDto"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryDto"
        "400":
          description: Invalid status value
  /product:
    get:
      tags:
        - product
      summary: get all products
      description: get all products
      operationId: getAllProduct
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductDto"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductDto"
        "400":
          description: Invalid status value
    put:
      tags:
        - product
      summary: Update an existing product
      description: Update an existing product by Id
      operationId: updateProduct
      requestBody:
        description: Update an existent product in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductDto"
          application/xml:
            schema:
              $ref: "#/components/schemas/ProductDto"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/ProductDto"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductDto"
            application/xml:
              schema:
                $ref: "#/components/schemas/ProductDto"
        "400":
          description: Invalid ID supplied
        "404":
          description: Product not found
        "405":
          description: Validation exception
    post:
      tags:
        - product
      summary: Add a new product to the store
      description: Add a new product to the store
      operationId: addProduct
      requestBody:
        description: Create a new product in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductDto"
          application/xml:
            schema:
              $ref: "#/components/schemas/ProductDto"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/ProductDto"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductDto"
            application/xml:
              schema:
                $ref: "#/components/schemas/ProductDto"
        "405":
          description: Invalid input
  /product/{name}:
    get:
      tags:
        - product
      summary: Finds products by name
      operationId: getProductByName
      parameters:
        - name: name
          in: path
          description: "The name that needs to be fetched. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductDto"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductDto"
        "400":
          description: Invalid status value
  /product/{id}:
    get:
      tags:
        - product
      summary: Finds products by id
      operationId: getProductById
      parameters:
        - name: id
          in: path
          description: "The id that needs to be fetched. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductDto"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductDto"
        "400":
          description: Invalid status value
    delete:
      tags:
        - product
      summary: Delete product by id
      operationId: DeleteProductById
      parameters:
        - name: id
          in: path
          description: "The id that needs to be fetched. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductDto"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductDto"
        "400":
          description: Invalid status value
  /unit:
    get:
      tags:
        - unit
      summary: get all units
      description: get all units
      operationId: getAllUnit
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UnitDto"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UnitDto"
        "400":
          description: Invalid status value
    put:
      tags:
        - unit
      summary: Update an existing unit
      description: Update an existing unit by Id
      operationId: updateUnit
      requestBody:
        description: Update an existent unit in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnitDto"
          application/xml:
            schema:
              $ref: "#/components/schemas/UnitDto"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UnitDto"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnitDto"
            application/xml:
              schema:
                $ref: "#/components/schemas/UnitDto"
        "400":
          description: Invalid ID supplied
        "404":
          description: Unit not found
        "405":
          description: Validation exception
    post:
      tags:
        - unit
      summary: Add a new unit to the store
      description: Add a new unit to the store
      operationId: addUnit
      requestBody:
        description: Create a new unit in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnitDto"
          application/xml:
            schema:
              $ref: "#/components/schemas/UnitDto"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UnitDto"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnitDto"
            application/xml:
              schema:
                $ref: "#/components/schemas/UnitDto"
        "405":
          description: Invalid input
  /unit/{name}:
    get:
      tags:
        - unit
      summary: Finds units by name
      operationId: getUnitByName
      parameters:
        - name: name
          in: path
          description: "The name that needs to be fetched. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UnitDto"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UnitDto"
        "400":
          description: Invalid status value
  /unit/{id}:
    get:
      tags:
        - unit
      summary: Finds unit by id
      operationId: getUnitById
      parameters:
        - name: id
          in: path
          description: "The id that needs to be fetched. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UnitDto"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UnitDto"
        "400":
          description: Invalid status value
    delete:
      tags:
        - unit
      summary: Delete unit by id
      operationId: DeleteUnitById
      parameters:
        - name: id
          in: path
          description: "The id that needs to be fetched. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UnitDto"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UnitDto"
        "400":
          description: Invalid status value
  /bundle:
    get:
      tags:
        - bundle
      summary: get all bundles
      description: get all bundles
      operationId: getAllBundle
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BundleDto"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BundleDto"
        "400":
          description: Invalid status value
    put:
      tags:
        - bundle
      summary: Update an existing bundle
      description: Update an existing bundle by Id
      operationId: updateBundle
      requestBody:
        description: Update an existent bundle in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BundleDto"
          application/xml:
            schema:
              $ref: "#/components/schemas/BundleDto"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/BundleDto"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BundleDto"
            application/xml:
              schema:
                $ref: "#/components/schemas/BundleDto"
        "400":
          description: Invalid ID supplied
        "404":
          description: Unit not found
        "405":
          description: Validation exception
    post:
      tags:
        - bundle
      summary: Add a new bundle to the store
      description: Add a new bundle to the store
      operationId: addBundle
      requestBody:
        description: Create a new bundle in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BundleDto"
          application/xml:
            schema:
              $ref: "#/components/schemas/BundleDto"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/BundleDto"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BundleDto"
            application/xml:
              schema:
                $ref: "#/components/schemas/BundleDto"
        "405":
          description: Invalid input
  /bundle/{name}:
    get:
      tags:
        - bundle
      summary: Finds bundles by name
      operationId: getBundleByName
      parameters:
        - name: name
          in: path
          description: "The name that needs to be fetched. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BundleDto"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BundleDto"
        "400":
          description: Invalid status value
  /bundle/{id}:
    get:
      tags:
        - bundle
      summary: Finds bundle by id
      operationId: getBundleById
      parameters:
        - name: id
          in: path
          description: "The id that needs to be fetched. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BundleDto"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BundleDto"
        "400":
          description: Invalid status value
    delete:
      tags:
        - bundle
      summary: Delete bundle by id
      operationId: DeleteBundleById
      parameters:
        - name: id
          in: path
          description: "The id that needs to be fetched. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BundleDto"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BundleDto"
        "400":
          description: Invalid status value
components:
  schemas:
    CategoryDto:
      type: object
      properties:
        id:
          type: string
          example: C0001
        name:
          type: string
          example: Nước
      xml:
        name: categoryDto
    ProductDto:
      type: object
      properties:
        id:
          type: string
          example: SP0001
        name:
          type: string
          example: Nước đóng chai SATORI
        image:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: image
        category:
          $ref: "#/components/schemas/CategoryDto"
        unit:
          $ref: "#/components/schemas/UnitDto"
        label:
          type: string
          description: label for product
          enum:
            - Bán chạy
            - Mới
        bundle:
          $ref: "#/components/schemas/BundleDto"
        description:
          type: string
          example: Nước đóng chai SATORI tinh khiết
        code:
          type: integer
          format: int64
          example: 12783619827319
        price:
          type: number
          format: double
          example: 6000
        costPrice:
          type: number
          format: double
          example: 5000
        inventory:
          type: number
          example: 50
      xml:
        name: productDto
    UnitDto:
      type: object
      properties:
        id:
          type: string
          example: U0001
        name:
          type: string
          example: Chai
        conversionUnit:
          type: string
          example: Thùng
      xml:
        name: unitDto
    BundleDto:
      type: object
      properties:
        id:
          type: string
          example: B0001
        nameGroup:
          type: string
          example: Chả
        name:
          type: string
          example: Chả lụa
        price:
          type: number
          format: double
          example: 10000
        costPrice:
          type: number
          format: double
          example: 4000
        status:
          type: boolean
      xml:
        name: bundleDto
