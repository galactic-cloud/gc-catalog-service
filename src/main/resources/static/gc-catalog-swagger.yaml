openapi: 3.0.1
info:
  title: Book Shop
  description: Book CRUD API.
  version: 1.0.0
servers:
- url: /v2
paths:
  /unit:
    get:
      tags:
        - unit
      summary: Get Units
      description: get all units
      operationId: getAllUnit
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UnitDto'
        400:
          description: Invalid status value
    post:
      tags:
        - unit
      summary: Add a Unit
      operationId: addUnit
      requestBody:
        description: Unit to be added in shop
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitDto'
        required: true
      responses:
        200:
          description: Unit Added
          content:
            application/json:
              schema:
                type: string
        405:
          description: Invalid input
      x-codegen-request-body-name: unit
    put:
      tags:
        - unit
      summary: Update a Unit
      operationId: updateUnit
      requestBody:
        description: Update a existent unit in shop
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitDto'
        required: true
      responses:
        200:
          description: Unit Added
          content:
            application/json:
              schema:
                type: string
        404:
          description: Unit not found
        405:
          description: Validation exception
      x-codegen-request-body-name: unit
  /unit/name/{name}:
    get:
      tags:
        - unit
      summary: get units by name
      operationId: GetUnitByName
      parameters:
        - name: name
          in: path
          description: "The name that needs to be fetched. "
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UnitDto'
        400:
          description: Invalid status value
  /unit/value/{value}:
    get:
      tags:
        - unit
      summary: get units by value
      operationId: GetUnitByValue
      parameters:
        - name: value
          in: path
          description: "The value that needs to be fetched. "
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UnitDto'
        400:
          description: Invalid status value
  /unit/{id}:
    delete:
      tags:
        - unit
      summary: Delete unit by id
      operationId: DeleteUnitById
      parameters:
        - name: id
          in: path
          description: "The id that needs to be fetched. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Invalid status value
    get:
      tags:
        - unit
      summary: Get unit by id
      operationId: GetUnitById
      parameters:
        - name: id
          in: path
          description: "The id that needs to be fetched. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Invalid status value
components:
  schemas:
    UnitDto:
      type: object
      properties:
        id:
          type: string
          example: U0001
        name:
          type: string
          example: Chai
        value:
          type: integer
          format: int32
          example: 1
